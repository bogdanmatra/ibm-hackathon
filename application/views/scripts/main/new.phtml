
    <style>
      html, body, #map-canvas {
        height: 100%;
        margin: 0px;
        padding: 0px
      }
      #panel {
        position: absolute;
        top: 5px;
        left: 50%;
        margin-left: -180px;
        z-index: 5;
        background-color: #fff;
        padding: 5px;
        border: 1px solid #999;
      }
    </style>

    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp"></script>
    <script>





var map;
var directionsDisplay;
var directionsService;
var stepDisplay;
var markerArray = [];

function initialize() {

geocoder = new google.maps.Geocoder();
  var latlng = new google.maps.LatLng(-34.397, 150.644);
  var mapOptions = {
    zoom: 8,
    center: latlng
  }

  // Instantiate a directions service.
  directionsService = new google.maps.DirectionsService();

  // Create a map and center it on bucuresti.
  var manhattan = new google.maps.LatLng(44.432998, 26.103245);  
  var mapOptions = {
    zoom: 13,
    center: manhattan
  }
  map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

  // Create a renderer for directions and bind it to the map.
  var rendererOptions = {
    map: map
  }
  directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions)

  // Instantiate an info window to hold step text.
  stepDisplay = new google.maps.InfoWindow();
}

function calcRoute() {

  // First, remove any existing markers from the map.
  for (var i = 0; i < markerArray.length; i++) {
    markerArray[i].setMap(null);
  }

  // Now, clear the array itself.
  markerArray = [];

  // Retrieve the start and end locations and create
  // a DirectionsRequest using WALKING directions.
  var start = document.getElementById('start').value;
  var end = document.getElementById('end').value;
  var request = {
      origin: start,
      destination: end,
      travelMode: google.maps.TravelMode.DRIVING
  };

  // Route the directions and pass the response to a
  // function to create markers for each step.
  directionsService.route(request, function(response, status) {
    if (status == google.maps.DirectionsStatus.OK) {
      var warnings = document.getElementById('warnings_panel');
      warnings.innerHTML = '<b>' + response.routes[0].warnings + '</b>';
      directionsDisplay.setDirections(response);
      showSteps(response);

     
    }
  }); 
}

function showSteps(directionResult) {
  // For each step, place a marker, and add the text to the marker's
  // info window. Also attach the marker to an array so we
  // can keep track of it and remove it when calculating new
  // routes.
  var myRoute = directionResult.routes[0].legs[0];
  var names = [];
  for (var i = 0; i < myRoute.steps.length; i++) {
    var marker = new google.maps.Marker({
      position: myRoute.steps[i].start_location,
      map: map
    });
   

 var lat = myRoute.steps[i].end_point.k;
 var lng = myRoute.steps[i].end_point.B;
 var start_location = myRoute.steps[i].start_location;

   $.ajax({
            url: "http://maps.googleapis.com/maps/api/geocode/json?latlng="+lat+","+lng+"&sensor=false",
            type: 'get',
            async: false,
            success: function(data) {
                names.push( data.results[0].formatted_address.split(",")[1]);
            }
        });

    markerArray[i] = marker;
  }
  console.log(names);

    var stripped = [];
     $.each(names, function(i, el){
            var withNoDigits = el.replace(/[0-9]/g, '');
            stripped.push(withNoDigits.trim());
        });

      console.log(stripped);
     var uniqueNames = [];
        $.each(stripped, function(i, el){
            if($.inArray(el, uniqueNames) === -1) uniqueNames.push(el.latinise());
        });
     

     console.log(uniqueNames);
      function remove(arr, what) {
      var found = arr.indexOf(what);

      while (found !== -1) {
        arr.splice(found, 1);
        found = arr.indexOf(what);
         }
      }
      remove(uniqueNames, "Romania");
      $('input[type="hidden"]').val(uniqueNames);
      return names;
}



function attachInstructionText(marker, text) {
  google.maps.event.addListener(marker, 'click', function() {
    // Open an info window when the marker is clicked on,
    // containing the text of the step.
    stepDisplay.setContent(text);
    stepDisplay.open(map, marker);
  });
}


function codeAddress() {
  var address = document.getElementById('start').value;
  var doIt = this;
  geocoder.geocode( { 'address': address}, function(results, status) {
    if (status == google.maps.GeocoderStatus.OK) {
      map.setCenter(results[0].geometry.location);
      doIt.value = results[0].formatted_address;
    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  });
}


function codeLatLng(lat, lng) {

    var latlng = new google.maps.LatLng(lat, lng);
    geocoder.geocode({'latLng': latlng}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
      console.log(results)
        if (results[1]) {

             for (var i=0; i<results[0].address_components.length; i++) {
            for (var b=0;b<results[0].address_components[i].types.length;b++) {

            //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate
                if (results[0].address_components[i].types[b] == "administrative_area_level_1") {
                    //this is the object you are looking for
                    city= results[0].address_components[i];
                    break;
                }
            }
        }
        //city data

        var address = document.getElementById('start');
        address.value = city.long_name;
        $('#startForm').val(city.long_name.latinise());

        } else {
          alert("No results found");
        }
      } else {
        alert("Geocoder failed due to: " + status);
      }
    });
  }


function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPosition);
    } else { 
        x.innerHTML = "Geolocation is not supported by this browser.";
    }
}

function showPosition(position) {
    codeLatLng( position.coords.latitude,position.coords.longitude);
}


google.maps.event.addDomListener(window, 'load', initialize);

getLocation();





 $(function() {

     $("#routeDate").datepicker({ dateFormat: 'dd.mm.yy', minDate: 'dateToday'});
                
  });

    </script>
  
<script type="text/javascript">
    $(document).ready(function(){
        $('#start').on('keyup', function(){
           $('#startForm').val($(this).val().latinise()); 
        }); 
        
        $('#startForm').on('keyup', function(){
           $('#start').val($(this).val()); 
        }); 
        
        $('#endForm').on('keyup', function(){
           $('#end').val($(this).val()); 
        }); 
        
        $('#end').on('keyup', function(){
           $('#endForm').val($(this).val().latinise()); 
        }); 
        
        $('#endForm').focusout(function(){
           calcRoute(); 
        });
        
        
        
    });
    

</script>


    <div id="panel" style="top: 50px; left: 64%;">

        <!-- <input id="address" type="textbox" value="Sydney, NSW">
      <input type="button" value="Geocode" onchange="codeAddress()">
    <b>Start: </b> -->
    <input type="text" id="start" value="" onchange="codeAddress(this)">
   
    <b>End: </b>
    <input type="text" id="end" value="" onchange="codeAddress(this)">
    <input type="button" value="Geocode" onclick="calcRoute()">
    </div>
    <div id="map-canvas" style="width: 60%; float: right;"></div>
    &nbsp;
    <div id="warnings_panel" style="width:0;height:0;text-align:center"></div>

<?php 
    echo $this->newForm;

    